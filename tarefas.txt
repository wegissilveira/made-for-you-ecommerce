ETAPAS DO REFATORAMENTO

FASE 1 - Melhorias estruturais e funcionais:

1- Refatorar JSX e estruturação dos componentes: OK
   - MainPageHeader: OK
   - MainSliderHeader: OK
   - MinorSliderHeader: OK
   - ProgressBar: 
   - Products: OK
   - ProductCard: OK 
   - ProductPageModal (ProductModal): OK
   - ProductInfoComponent: OK
   - ProgressBar: Não mexer por enquanto
   - ProductQtde: Não mexer por enquanto
   - Filter: OK
   - BestDeal (BestDealSession): OK
   - Cart: OK
   - ProductCart: Analisar posteriormente - talvez transformar em uma tabela ou algo semelhante. Está muito estranho da maneira atual
   - CartForm: OK
   - Navigation (Header): OK
   - NavigationMobile (DrawerMenu): OK
   - Contact: OK
   - MainPageProducts: OK
   - mainPageDiscounts: OK
   - Footer: OK

2- Implementar o Portals nos modais: OK
   - ProductPageModal:
      -> Faz uso da lib react-modal que já aplica o portal de maneira nativa
   - Toastify: OK

3- Analisar Funções dentro dos componentes e identificar melhorias
   - Header
      -> NavigationDesk: Sem alterações
      -> HeaderUserOptions: OK
         - SearchProducts: OK
      

   - Ajustes pontuais:
      -> Ver se é possível transformar o slider da pdp e o do modal dos produtos em um único componente
      -> (BUG) O terceiro produto da lista do Cart está sempre retornando NaN no preço - aparentemente, depois de criar CartList o NaN ocorre com o primeiro produto
      -> (MELHORIA) Considerar habilitar o header da galeria da home no mobile. Caso isso aconteça, criar um componente para compartilhar a lógica dos header mobile e desk
      -> (BUG): Corrigir mensagem de wishlist vazia, está usando a mesma mensagem de busca vazia
      -> (BUG): Scroll de show more/less parece funcionar bem somente em telas com 1366px, telas maiores o cálculo não parece estar correto - OBS.: A função foi removida de 'Products' e convertida no hook 'useSetPageTop'. Corrigir o bug e analisar possíveis melhorias no código.
      -> O código de montar a prateleira foi reorganizado, mas acredito que ainda caiba melhorias. Analisar as possibilidades após reorganizar/refatorar código de Filter.
      -> (BUG): Bullets de cores do filtro continuam selecionados após o filtro ser resetado
      -> (BUG/MELHORIA): Na hora de resetar o filtro o dispatch de filtros de preço está sendo executado duas vezes, uma pela função de limpar filtros e outra pela função 'setPriceRange', que é chamada como callback a partir do slider de preço:
         - A função é necessária por ora pois o cálculo do preço é feito no slider baseado na posição dos bullets, no entanto não há a necessidade de se executar tal função no momento de limpar o filtro, já que o dispatch de resetar o filtro já ajusta a propriedade de preços;
         - Mas limpar filtros também executa a função que reposiciona os bullets no slider, caso tal função seja removida os bullets não são reposicionados e caso seja mantida ela executa o slider e chama 'setPriceRange';
         - Buscar uma maneira de não executar 'setPriceRange' no momento de limpar o filtro, mas ao mesmo tempo reposicionar os bullets do slider de preço.
      -> (MELHORIA): Botão 'FILTER' no filtro não tem nenhuma função - removê-lo caso não tenha nenhuma utilidade
      -> (BUG): Só de passar o cursor sobre o slider de preço a função está sendo chamada. O msm ocorre com todo o ciclo de funções ligadas a priceSlider
   
   3.1- Analisar warnings no terminal

4- Analisar Redux e identificar melhorias, tanto na store quanto nos componentes
   3.1- Analisar distribuição de props para identificar os pontos desnecessários que possam ser substituídos pelo contexto do redux

5- Análise de e correção de renderizações desnecessárias

EXTRAS: 
1- Reestruturar o UserForm para que receba as informações como props e seja, de fato, um componente dinâmico. Em UserLogin, ao invés de importar usar um UserForm que renderiza ambos os forma internamente, usará dois, onde cada um receberá as respectivas informações de cada formulário. Talvez setar onde componente (a ser criado) como o componente base, já que o componente par renderizará os forms de sign in e sign up. Esta última parte por questões de semântica.


FASE 2 - Implementação do TypeScript

FASE 3 - Subir para produção
   - OBS.: Alterar script de busca para versão em prod



/* ********** */
MONTAGEM DAS PRATELEIRAS NO IF/else
REFERÊNCIA EM CASO DE PRECISAR
REMOVER DEPOIS QUE NÃO FOR MAIS NECESSÁRIO
// Mostrar todos os produtos
if (tagVar === 'all-products' && categoryVar === 'all') {
   products = productsData

// Mostrar todos produtos da respectiva categoria (kitchen, bedroom etc)
} else if (tagVar === 'all-products' && categoryVar !== 'all') {
   products = productsData.filter(item => item.category === categoryVar)

// Mostrar todos os produtos com a respectiva tag (furniture, decorations, textile)
} else if (tagVar !== 'all-products' && categoryVar === 'all') {
   products = productsData.filter(item => item.tag === tagVar)

// Mostrar produtos dentro da categoria escolhida e que tenha a tag determinada
// Ex.: Bedroom + furniture (Somente os produtos com tag 'furniture' que pertencem a categoria 'bedroom')
} else if (tagVar !== 'all-products' && categoryVar !== 'all') {
   products = productsData.filter(item => item.tag === tagVar)
   products = products.filter(item => item.category === categoryVar)
}