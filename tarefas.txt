ETAPAS DO REFATORAMENTO

FASE 1 - Melhorias estruturais e funcionais:

1- Refatorar JSX e estruturação dos componentes: OK
   - MainPageHeader: OK
   - MainSliderHeader: OK
   - MinorSliderHeader: OK
   - ProgressBar: 
   - Products: OK
   - ProductCard: OK 
   - ProductPageModal (ProductModal): OK
   - ProductInfoComponent: OK
   - ProductInfoBody: OK
   - ProgressBar: Não mexer por enquanto
   - ProductQtde: OK
   - ProductQtdeMobile: OK
   - Filter: OK
   - BestDeal (BestDealSession): OK
   - Cart: OK
   - ProductCart: OK
   - CartForm: OK
   - Navigation (Header): OK
   - NavigationMobile (DrawerMenu): OK
   - Contact: OK
   - MainPageProducts: OK
   - mainPageDiscounts: OK
   - Footer: OK

2- Implementar o Portals nos modais: OK
   - ProductPageModal:
      -> Faz uso da lib react-modal que já aplica o portal de maneira nativa
   - Toastify: OK

3- Analisar Funções dentro dos componentes e identificar melhorias
   - Header
      -> NavigationDesk - Sem alterações
      -> HeaderUserOptions - OK
         - SearchProducts - OK
   - Filter - OK
      -> FilterHeader - OK
      -> FilterBody - OK
         - FilterCheckbox - OK
         - FilterColorSelector - OK
         - PriceSlider - OK
      -> FilterBottom - OK
   - PDP
      -> ProductSlider - OK
      -> ProductInfoComponent - Há um ponto a ser analisado que está anotado no componente
         - ProductInfoHeader - Sem alterações
         - ProductInfoBody - OK
            -> SKUSizeSelector - OK
            -> ProductsQtde - OK
            -> ProductQtdeMobile - OK
         - ProductInfoFooter: Sem alterações
   - CARINHO
      -> Cart - OK
         - CartList - OK
            -ProductCart - OK
            -CartForm - OK
   - HOME
      -> MainPageConfig
         - MainPageHeader
            -MinorSliderHeader - OK
            -MainSliderHeader - OK
         - MainPageShopByRoom - Sem alterações
         - MainPageProducts - OK
            -MainPageProductsHeader - OK
            -MainPageProductsHeaderMobile - ESTÁ DESATIVADO (REATIVAÇÃO SENDO ANALISADA)
         - mainPageDiscounts - Sem alterações
         - mainPageBenefits - Sem alterações
   - BestDealSection - OK
   - Compartilhado
      -> ProductPageModal - OK
         -ProductModalSlider - OK
      -> ProgressBar - OK
      -> ColorSelect - OK
      -> ProductQty - OK
      -> ProductQtyMobile - OK
      -> Toastify - OK
      

   - Ajustes pontuais: - OK  
      *****ABORTADOS****      
      -> (MELHORIA): Buscar uma maneira de melhorar a chamada de toggleQtySelectMobileHandler em ProductQtyMobile para que não seja necessário ficar passando a função como callback:
         - Talvez inserir a função em um helper ou criar um hook para fazer o toggle do modal
         - Analisar a possibilidade de se compartilhar o hook ou o helper com outros modais
         => MOTIVO: Está sendo passado só em um nível após atualizações
      -> (MELHORIAS): Analisar a possibilidade e a utilidade de se criar um hook para os bullets de cores
      -> (MELHORIA) Ver se é possível transformar o slider da pdp e o do modal dos produtos em um único componente
      -> (MELHORIA): Botão para limpar busca
      -> (MELHORIA): Inserir estoque no objeto de productsData e passar o 'max' que está sendo recebido nos componentes de quantidade dos produtos para o valor do estoque.
      -> (MELHORIA): build useContainerHeight hook para remover o containerHeightHandler do hook useCallResizeWarning, já que não faz sentido ele está ali. - MOTIVO => Não vale o esforço no momento.
      -> (MELHORIA) Considerar habilitar o header da galeria da home no mobile. Caso isso aconteça, criar um componente para compartilhar a lógica dos header mobile e desk



      *****FEITOS*****
      -> O código de montar a prateleira foi reorganizado, mas acredito que ainda caiba melhorias. Analisar as possibilidades após reorganizar/refatorar código de Filter. - FALTA ANALISAR O CÓDIGO DO SLIDER E PASSAR LIMPAR FILTRO PARA FILTERBOTTOM - OK
      -> (BUG): Bullets de cores do filtro continuam selecionados após o filtro ser resetado - OK
      -> (BUG/MELHORIA): Na hora de resetar o filtro o dispatch de filtros de preço está sendo executado duas vezes, uma pela função de limpar filtros e outra pela função 'setPriceRange', que é chamada como callback a partir do slider de preço: - OK
         - A função é necessária por ora pois o cálculo do preço é feito no slider baseado na posição dos bullets, no entanto não há a necessidade de se executar tal função no momento de limpar o filtro, já que o dispatch de resetar o filtro já ajusta a propriedade de preços;
         - Mas limpar filtros também executa a função que reposiciona os bullets no slider, caso tal função seja removida os bullets não são reposicionados e caso seja mantida ela executa o slider e chama 'setPriceRange';
         - Buscar uma maneira de não executar 'setPriceRange' no momento de limpar o filtro, mas ao mesmo tempo reposicionar os bullets do slider de preço.
      -> (BUG): Só de passar o cursor sobre o slider de preço a função está sendo chamada. O msm ocorre com todo o ciclo de funções ligadas a priceSlider - OK
      -> (MELHORIA): Botão 'FILTER' no filtro não tem nenhuma função - removê-lo caso não tenha nenhuma utilidade - OK      
      -> (BUG) Filtro 'agarrando' na hora de abrir e fechar após a configuração do contexto. Não abre com fluidez. - OK
         - Provavelmente tem a ver com renderizações desnecessárias. Se for muito complexo analisar na etapa 5, caso contrário já ajustar.
         - OBS.: Se resolveu após todo o contexto ser configurado. Acredito que havia algum conflito entre a lógica original e a nova enquanto estava em desenvolvimento.
      -> (MELHORIA): Função de limpar filtro do preço ainda não foi para 'FilterBottom' por conta de algumas limitações descritas em ambos os componentes envolvidos. Verificar isso e buscar uma maneira para passar tudo para FilterBottom; - OK
      -> (BUG): Quando não há cor selecionada o na hora de inserir o produto no carrinho a cor é uma string vazia, colocar uma verificação para evitar que isso ocorra ou setar a primeira cor como default. - OK
      -> (BUG): Ícones de elementos que estão no carrinho bugados na prateleira quando o filtro é acionado. - OK
      -> (BUG) Product page e modal page não estão identificando produto no minicart com o product do useProduct: - OK
         - Botão não reconhecendo produto no carrinho e  se mantendo verde - OK
         - a cor que está no carrinho não fica selecionada a não ser que o rerender de ColorSelect seja forçado - OK
         - O size também não fica selecionado. O problema é o mesmo do selector de cor - OK
         - Update ocorrendo no elemento errado, aparentemente no último item do array do minicart - OK
      -> (MELHORIA): Analisar se é possível setar um parâmetro na url para que possa ser capturado pelo useProduct hook e retornar o produto. Isso porque como não há id na url a partir da galeria, tive que adaptar o hook para receber um id como parâmetro quando não houver id na url: - OK
         - Eu consegui inserir um parâmetro ao location do history usando o history.replace, mas não uma valor ao params. Talvez eu possa utilizar o parÂmetro do location ao invés do useparams. Para isso eu teria que acrescentar esse parâmetro a PDP.
      -> (MELHORIA): Identificar pontos onde as props de 'products' possam ser substituídas por useProducs ou mesmo removidas. - OK
      -> (BUG): Select de product sendo atualizado com um render de atraso - OK
      -> (BUG): Quantidade não sendo inserida no minicart quando o usuário não escolhe no selector. Semelhante ao que ocorria com o selector de cores antes de haver validação - OK
      -> (BUG): Quantidade do produto não sendo atualizada no carrinho após lógica dos componentes de quantidade ser refatorada. Provavelmente o problema está nas funções callback que não estão atualizando as states necessárias - OK
      -> (MELHORIA): Talvez criar um contexto para administrar as states da pdp e do modal de produtos - OK
      -> (BUG): O valor setado no modal de quantidade de produtos do mobile é sempre 1. Corrigir para que seja o valor real - OK
      -> (BUG): Rota do carrinho para a PDP não está na estrutura nova com o parÂmetro 'productID' - OK
      -> (MELHORIA) Melhorar a maneira de setar o valor inicial do contexto do produto - Passou a ser setado no contexto - OK
      -> (MELHORIA): ANALISAR A PASSAGEM DO TOASTIFY PARA UM PORTAL - OK
      -> (BUG): Corrigir versão mobile do layout do filtro que sofreu alterações após refatoração. Analisar PDP e modal do produto também - OK
      -> (BUG): Quando se altera a quantidade de produtos e vai do checkout pra pdp e vice-versa o dropdown de quantidade fica com erro - OK
      -> (BUG): Preço total do checkout não atualizando quando se remove produtos do carrinho - OK
      -> (BUG): Só o primeiro produto do carrinho está tendo a quantidade exibida - OK
      -> (BUG) O terceiro produto da lista do Cart está sempre retornando NaN no preço - aparentemente, depois de criar CartList o NaN ocorre com o primeiro produto - OK
         - Não consegui reproduzir novamente. Acredito que tenha sido resolvido por consequência de outras alterações.
      -> (BUG): Na galeria da home, quando se clica no olho para abrir o modal se direciona para a categorias logo após a ação de abrir o modal - OK
      -> (MELHORIA): Corrigir url para que na pdp o id só apareça no parâmetro: - OK
         - Talvez substituir o id que não é parâmetro pelo nome do produto
      -> (MELHORIA): Adicionar mensagem de erro na PDP para alertar que é necessário selecionar uma cor antes de adicionar o produto no carrinho - OK
      -> (BUG/MELHORIA): Na PDP, inicialmente imagens é undefined, o que faz com que por uma fração de segundos apareçam as imagens quebradas:
         - Buscar uma maneira de corrigir isso, inicialmente tentar reverter o erro, caso não seja possível, inserir um loader até as imagens serem válidas - OK
      -> (BUG): Scroll de show more/less parece funcionar bem somente em telas com 1366px, telas maiores o cálculo não parece estar correto - OBS.: A função foi removida de 'Products' e convertida no hook 'useSetPageTop'. Corrigir o bug e analisar possíveis melhorias no código. - OK
   

   3.1- Analisar warnings no terminal - OK

4- Analisar Redux e identificar melhorias, tanto na store quanto nos componentes - OK
   Descrição: Analisar distribuição de props para identificar os pontos desnecessários que possam ser substituídos pelo contexto do redux

   - CONTACT - Sem alterações
   - FOOTER - Sem alterações
   - HEADER - OK
   - CART - OK
   - MainPage - Sem alterações
   - SHARED - Sem alterações
   - SHOP - Sem alterações 

      - Ajustes pontuais:
      


      *****APÓS REFATORAMENTO*****
      


      *****PRÓXIMOS NA FILA****  



      *****EM EXECUÇÃO**** 
      


      *****ABORTADOS****  



      *****FEITOS*****
      -> Setar valor inicial das states de wishlist e cart com um dispatch - OK 
      -> (MELHORIA): Passar finalPrice para o redux - OK
      -> (MELHORIA): Quando chegar no checkout analisar se é possível atualizar o valor do input diretamente de QtySelectorInput sem ter que ficar passando uma função callback como props - OK
      -> Criando a lógica de atualização do preço final no selector do mobile - OK




5- Análise e correção de renderizações desnecessárias - Abortei a maioria. O profiler não parece funcionar bem
   -> O update dos valores dos skus e quantidade da pdp atualiza states a cada alteração (mudei para um reducer) e a cada mudança de valor o componente pai (ProductInfoBody), que é o responsável pelo gerenciamento dos valores é renderizado. Eu quero que ele seja atualizado somente quando a requisição (localStorage) é realizada, talvez nem nesse caso, e não a cada alteração de valor. Eu poderia setar um valor no elemento, mas no caso da quantidade não é possível, já que o valor é criado com uma state. Buscar uma maneira de fazer isso. 

      - Ajustes pontuais:
      -> (MELHORIA): No ProgressBar o componente é renderizado sem para em decorrência da atualização constante dos bullets e da movimentação dos círculos:
         - Na fase de renderização analisar se é possível contornar isso e diminui a constância de renderização    
      -> Na PDP todas as ações renderizam várias partes, incluindo o HeaderUserOptions
      -> OBS.: Ações nos produtos da galeria não disparam nenhum rerender na home e em shop, no entanto em wishlist e nas páginas das categorias rerenders são disparados
      -> OBS.: As ações que disparam rerender na PDP não disparam no modal do produto

      


      *****APÓS REFATORAMENTO*****
      


      *****PRÓXIMOS NA FILA****  



      *****EM EXECUÇÃO**** 



      *****ABORTADOS****  
      -> No checkout HeaderUserOptions é renderizado quando se excluí um produto do carrinho. Entender o porquê e analisar uma maneira de prevenir isso:
         - Isso ocorre, pois quando eu removo um produto do carrinho a state global cart é alterada, tal state é recebida como props no componente em questão, o que o faz ser renderizado'
         - Cart é usado para definir se há itens no carrinho ou não, caso haja o ícone é verde, caso contrário cinza
         - Eu poderia buscar uma solução, a princípio pensei em criar uma state global que atualizaria somente quando o carrinho fosse de 0 pra 1 ou de 1 pra 0, sendo assim o componente seria renderizado somente quando tal state fosse alterada. Mas decidi que não vale o algo tão pequeno e pontual não compensa o aumento da complexidade.
         - OBS.: O mesmo ocorre na wishlist e a mesma decisão se aplica.



      *****FEITOS*****
   

6- Estudar os hooks, tanto documentação quanto o curso referência da lista de estudos, antes de fechar esta fase. O intuito é identificar se há alguma melhoria que possa ser feita usando os hooks que ainda não tenho conhecimento.


EXTRAS: 
1- Reestruturar o UserForm para que receba as informações como props e seja, de fato, um componente dinâmico. Em UserLogin, ao invés de importar usar um UserForm que renderiza ambos os forma internamente, usará dois, onde cada um receberá as respectivas informações de cada formulário. Talvez setar onde componente (a ser criado) como o componente base, já que o componente par renderizará os forms de sign in e sign up. Esta última parte por questões de semântica.


FASE 2 - Implementação do TypeScript - Estudar os artigos de typescript da makerevich antes de iniciar esta fase

      - Header - OK
      - Footer - OK
      - Contact - OK
      - MainPage: - OK
         - MainPageBenefits - OK
         - MainPageDiscounts - OK
         - MainPageProducts - OK
         - MainPageHeader - OK
         - MainPageShopByRoom - OK
      - ProductPage - Falta ProductInfoComponent
      - User - OK
      - UI: - OK
         - ColorSelect - OK
         - ProductQtyMobile - OK
         - ProductsQty - OK
         - ProgressBar - OK
         - Spinner - OK
         - Toastify - OK
      - BestDealSection - OK
      - Cart: - OK
         - CartForm - OK
         - CartList - OK
         - KeepBuyingBtn - OK
         - ProductCart - OK
      - Filter: - OK
         - context - OK
         - FilterBody - OK
         - FilterBottom - OK
         - FilterCheckbox - OK
         - FilterColorSelector - OK
         - FilterHeader - OK
         - helpers - OK
         - PriceSlider - OK


      - containers:
         - ShopConfig - ALTERAR APÓS Filter
         - MainPageConfig - OK
         - Layout - OK
      - hooks:
         - useCallResizeWarning - ALTERAR APÓS Filter
         - useProduct - OK
         - useSetPageTop - OK



      - Ajustes pontuais:
      -> (BUG): Na PDP ícone de favoritar (coração) invertido quando o produto está ou não na lista de favoritos
      -> (MELHORIA): Inserir o tipo Color onde for necessário
      -> (MELHORIA): Passar as cores do filtro para ColorSelect como props
      -> (BUG): Analisar erro de websocked failed e key is not a prop
      -> (BUG): Converter color HEX para texto na exibição no carrinho (e em qualquer outro lugar que precise)
         - Parece que não há uma maneira nativa, é necessário usar uma lista e comparar
         - https://github.com/bahamas10/css-color-names/blob/master/css-color-names.json
         - https://stackoverflow.com/questions/69141635/how-to-convert-rgb-color-to-color-name-string-in-javascript



      *****APÓS REFATORAMENTO*****



      *****PRÓXIMOS NA FILA****  



      *****EM EXECUÇÃO**** 



      *****ABORTADOS****  
      -> (MELHORIA TIPAGEM): Buscar uma maneira de tipar as strings de imagem que possuem 'require' de maneira mais forte, para que não aceitem qualquer string
         -> OBS.: Não parece ser possível para imagens. Daria pra fazer em 'runtime', mas isso não me entrega o que eu busco, que é o TS pontuando a falha.



      *****FEITOS****  
      -> (MELHORIA TIPAGEM): Criar tipagem de cores



FASE 3 - Subir para produção
   - OBS.: Alterar script de busca para versão em prod
